simd<-t(rbind(simx,simy))
simd<-simd %*% t(pca$loadings) + pca$center # transformando para o espaço original
plot(d,col="red")
points(simd)
d.clust.l <- lapply(1:as.integer(sqrt(n)), function(cent) kmeans(d, centers=cent)) #lapply melhor que sapply nesse caso
est.obs <- sapply(1:length(d.clust.l), function(i){
#d.clust.l[[i]]$betweens
d.clust.l[[i]]$tot.withinss
#d.clust.l[[i]]$tot.withinss/(n/2) - mesma coisa
#log(d.clust.l[[i]]$tot.withinss) - mesma coisa
#d.clust.l[[i]]$tot.withinss*log(d.clust.l[[i]]$betweens)
#log(d.clust.l[[i]]$betweens)/d.clust.l[[i]]$tot.withinss
#d.clust.l[[i]]$tot.withinss/n
#log( d.clust.l[[i]]$tot.withinss )
#d.clust.l[[i]]$betweens/d.clust.l[[i]]$tot.withinss
}); est.obs
par(mfrow=c(1,1))
plot(est.obs) # plotar esse depois das simulações
lines(est.obs)
simd.l<-lapply(1:1000, function(i){
simx<-runif(n/2,mx,Mx) # uniforme entre mx e Mx
simy<-runif(n/2,my,My) # uniforme entre my e My
# tentei tambem modificando o tamanho das uniformes geradas (2*n, n, 3*n)
simd<-t(rbind(simx,simy))
simd<-simd %*% t(pca$loadings) + pca$center # transformando para o espaço original
} )
simd.clusters <- sapply(simd.l, function(x) {
lapply(1:as.integer(sqrt(n)), function(cent) kmeans(x, centers=cent))
} )
est.v <- sapply(1:length(simd.clusters), function(i){
#simd.clusters[[i]]$betweenss
simd.clusters[[i]]$tot.withinss
#simd.clusters[[i]]$tot.withinss/(n/2) - mesma coisa
#log(simd.clusters[[i]]$tot.withinss) - mesma coisa
#simd.clusters[[i]]$tot.withinss*log(simd.clusters[[i]]$betweens)
#log(simd.clusters[[i]]$betweens)/simd.clusters[[i]]$tot.withinss
#simd.clusters[[i]]$tot.withinss/(10*n)
#log( simd.clusters[[i]]$tot.withinss )
#simd.clusters[[i]]$betweens/simd.clusters[[i]]$tot.withinss
})
est.m <- matrix(est.v, ncol = 10, byrow = TRUE)
colnames(est.m) <- paste("k=", c(1:10), sep="")
plot(est.obs) # plotar esse depois das simulações
lines(est.obs)
apply(est.m, 1, function(x){
lines(x)
} )
points(est.obs, col="red")
lines(est.obs, col="red")
x <- sapply(1:10, function(i){
t <- est.m[,i] < est.obs[i]
length(which(t==TRUE))/1000
}); x
n=100
d1<-matrix(rnorm(n,mean=2,sd=1.5), n/2, 2)
d2<-matrix(rnorm(n,mean=2,sd=.1), n/2, 2)
d<-rbind(d1,d2)
pca<-princomp(d)
str(pca)
mx<-min(pca$scores[,1]) # menor valor de x no espaço transformado
Mx<-max(pca$scores[,1]) # maior valor de x no espaço transformado
my<-min(pca$scores[,2]) # menor valor de y no espaço transformado
My<-max(pca$scores[,2]) # maior valor de y no espaço transformado
simx<-runif(n/2,mx,Mx) # uniforme entre mx e Mx
simy<-runif(n/2,my,My) # uniforme entre my e My
simd<-t(rbind(simx,simy))
simd<-simd %*% t(pca$loadings) + pca$center # transformando para o espaço original
plot(d,col="red")
points(simd)
d.clust.l <- lapply(1:as.integer(sqrt(n)), function(cent) kmeans(d, centers=cent)) #lapply melhor que sapply nesse caso
est.obs <- sapply(1:length(d.clust.l), function(i){
#d.clust.l[[i]]$betweens
d.clust.l[[i]]$tot.withinss
#d.clust.l[[i]]$tot.withinss/(n/2) - mesma coisa
#log(d.clust.l[[i]]$tot.withinss) - mesma coisa
#d.clust.l[[i]]$tot.withinss*log(d.clust.l[[i]]$betweens)
#log(d.clust.l[[i]]$betweens)/d.clust.l[[i]]$tot.withinss
#d.clust.l[[i]]$tot.withinss/n
#log( d.clust.l[[i]]$tot.withinss )
#d.clust.l[[i]]$betweens/d.clust.l[[i]]$tot.withinss
}); est.obs
par(mfrow=c(1,1))
plot(est.obs) # plotar esse depois das simulações
lines(est.obs)
simd.l<-lapply(1:1000, function(i){
simx<-runif(n/2,mx,Mx) # uniforme entre mx e Mx
simy<-runif(n/2,my,My) # uniforme entre my e My
# tentei tambem modificando o tamanho das uniformes geradas (2*n, n, 3*n)
simd<-t(rbind(simx,simy))
simd<-simd %*% t(pca$loadings) + pca$center # transformando para o espaço original
} )
simd.clusters <- sapply(simd.l, function(x) {
lapply(1:as.integer(sqrt(n)), function(cent) kmeans(x, centers=cent))
} )
est.v <- sapply(1:length(simd.clusters), function(i){
#simd.clusters[[i]]$betweenss
simd.clusters[[i]]$tot.withinss
#simd.clusters[[i]]$tot.withinss/(n/2) - mesma coisa
#log(simd.clusters[[i]]$tot.withinss) - mesma coisa
#simd.clusters[[i]]$tot.withinss*log(simd.clusters[[i]]$betweens)
#log(simd.clusters[[i]]$betweens)/simd.clusters[[i]]$tot.withinss
#simd.clusters[[i]]$tot.withinss/(10*n)
#log( simd.clusters[[i]]$tot.withinss )
#simd.clusters[[i]]$betweens/simd.clusters[[i]]$tot.withinss
})
est.m <- matrix(est.v, ncol = 10, byrow = TRUE)
colnames(est.m) <- paste("k=", c(1:10), sep="")
plot(est.obs) # plotar esse depois das simulações
lines(est.obs)
apply(est.m, 1, function(x){
lines(x)
} )
points(est.obs, col="red")
lines(est.obs, col="red")
x <- sapply(1:10, function(i){
t <- est.m[,i] < est.obs[i]
length(which(t==TRUE))/1000
}); x
rm(list=ls())
tempo1 <- scan()
delta <- rep(1, length(tempo1))
delta
tempo2 <- scan()
109 + , 113, 116 + , 118, 143, 154 + , 162 + , 188 + , 212 + , 217 + , 225 +
tempo2 <- c(5,8,10,13,18,24,26,26,31,35,40,41,48,50,59,61,68,71,76,105,107,
109,113,116,118,143,154,162,188,212,217,225)
delta1 <- rep(1, length(tempo1))
rm(delta)
delta2 <- c(rep(1, 18), 0,0,0,0,1,0,1,1,0,0,0,0,0,0)
0,01 0,06 0,06 + 0,07 0,12 0,18 0,19 0,41 0,57 0,83 0,83 + 1,31 1,42 1,64 1,79
2,77 2,78 3,03 3,04 3,84 5,14 6,21 6,30 10,76 + 11,52 14,06 27,27 29,94 38,09 186,73 +
tempo3 <- c(0.01,0.06,0.06,0.07,0.12,0.18,0.19,0.41,0.57,0.83,0.83,1.31,1.42,
1.64,1.79,2.77,2.78,3.03,3.04,3.84,5.14,6.21,6.30,10.76,11.52,
14.06,27.27,29.94,38.09,108.73)
delta3 <- c(1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0)
library(survival)
dados1 <- Surv(tempo1,delta1)
km1 <- survfit(dados1~1)
plot(km1, conf.int = F, main="dados1", xlab="tempo", ylab="S(t)")
dados2 <- Surv(tempo2,delta2)
km2 <- survfit(dados2~1)
plot(km2, conf.int = F, main="dados2", xlab="tempo", ylab="S(t)")
dados3 <- Surv(tempo3,delta3)
km3 <- survfit(dados3~1)
plot(km3, conf.int = F, main="dados3", xlab="tempo", ylab="S(t)")
dados2 <- Surv(tempo2,delta2)
km2 <- survfit(dados2~1)
plot(km2, conf.int = F, main="dados2", xlab="tempo", ylab="S(t)")
t1<-sort(tempo1)
n1<-length(t1)
A1<-(1:n)/n
n1<-length(t1)
A1<-(1:n)/n
A1<-(1:n1)/n1
G1<-numeric()
par(mfrow=c(1,3))
TTT.it <- function(tempo){
t<-sort(tempo)
n<-length(t)
A<-(1:n)/n
G<-numeric()
for(i in 1:n){
G[i]<- (sum(t[1:i] + (n-i)*t[i])/sum(t))
}
plot(A,G,type="l", main="TTT", xlab="A=r/n", ylab=G(r/n))
}
TTT.it(tempo1)
TTT.it <- function(tempo){
t<-sort(tempo)
n<-length(t)
A<-(1:n)/n
G<-numeric()
for(i in 1:n){
G[i]<- (sum(t[1:i] + (n-i)*t[i])/sum(t))
}
plot(A,G,type="l", main="TTT", xlab="A=r/n", ylab="G(r/n)")
}
TTT.it(tempo1)
sapply(cbind(tempo1,tempo2,tempo3), TTT.it)
TTT.it(tempo2)
TTT.it(tempo1)
TTT.it(tempo2)
TTT.it(tempo2)
TTT.it(tempo2)
TTT.it(tempo1)
TTT.it(tempo2)
TTT.it(tempo3)
TTT.it <- function(tempo){
t<-sort(tempo)
n<-length(t)
A<-(1:n)/n
G<-numeric()
for(i in 1:n){
G[i]<- (sum(t[1:i] + (n-i)*t[i])/sum(t))
}
plot(A,G,type="l", main="TTT", xlab="A=r/n", ylab="G(r/n)")
points(c(0,1), c(0,1),type="l",lty=3)
}
TTT.it(tempo1)
TTT.it(tempo2)
TTT.it(tempo3)
par(mfrow=c(2,2))
tempo<-c(1,1,2,2,3,3,3,4,5,6,6,6,8,9,10,12,12,12,12,13,13,16,18,19,22,22,26,29,39,42)
t<-sort(tempo)
n<-length(t)
A<-(1:n)/n
G<-numeric()
for (i in 1:n){
G[i]<- (sum(t[1:i]) + (n-i)*t[i])/sum(t)
}
plot(A,G,type="l",main="TTT plot - Exemplo 4.1",xlab="A=r/n",ylab="G(r/n)")
points(c(0,1),c(0,1),type="l",lty=3)
tempo<-c(50.25,	87.75,	87.76,	87.77,	92.90,
92.91,	95.96,	108.30,	108.30,	117.90,
123.90,	124.30,	129.70,	135.60,	135.60)
t<-sort(tempo)
n<-length(t)
A<-(1:n)/n
G<-numeric()
for (i in 1:n){
G[i]<- (sum(t[1:i]) + (n-i)*t[i])/sum(t)
}
plot(A,G,type="l",main="TTT plot - Exemplo 4.2",xlab="A=r/n",ylab="G(r/n)",ylim=c(0,1),xlim=c(0,1))
points(c(0,1),c(0,1),type="l",lty=3)
tempo<-c(0.1,   0.3,   0.3,   0.4 ,  0.4 ,  0.5,   0.5 ,   0.6 ,   0.6 ,   0.7 ,   0.8 ,  1.0 ,    1.0 ,    1.1 ,     1.2,
1.3 ,  1.8 ,  2.6 ,  2.9,   4.3 ,   5.6 ,  6.6 , 10.7 , 11.9 , 12.5 , 26.1  , 65.0 ,  86.9 ,  90.5 , 120.6)
t<-sort(tempo)
n<-length(t)
A<-(1:n)/n
G<-numeric()
for (i in 1:n){
G[i]<- (sum(t[1:i]) + (n-i)*t[i])/sum(t)
}
plot(A,G,type="l",main="TTT plot - Exemplo 4.3",xlab="A=r/n",ylab="G(r/n)",ylim=c(0,1),xlim=c(0,1))
points(c(0,1),c(0,1),type="l",lty=3)
TTT.it(tempo1)
TTT.it(tempo2)
TTT.it(tempo3)
TTT.it(tempo1)
esp.loc <- file.choose()
esp.df <- read.csv(esp.loc)
esp.df
View(esp.df)
library(mclust)
library(factoextra)
model <- Mclust(esp)
model <- Mclust(esp.df)
summary(model$BIC)
fviz_mclust_bic(model)
esp.df$cluster <- as.factor(model$classification)
p1 <- ggplot(esp.df, aes_string(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
}); p1
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1
model <- Mclust(esp.df, G=10)
summary(model$BIC)
fviz_mclust_bic(model)
esp.df$cluster <- as.factor(model$classification)
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1
model <- Mclust(esp.df, G=15)
summary(model$BIC)
fviz_mclust_bic(model)
esp.df$cluster <- as.factor(model$classification)
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1
model <- Mclust(esp.df, G=9)
summary(model$BIC)
fviz_mclust_bic(model)
esp.df$cluster <- as.factor(model$classification)
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1
model <- Mclust(esp.df, G=10)
summary(model$BIC)
fviz_mclust_bic(model)
esp.df$cluster <- as.factor(model$classification)
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1
require(maptools)
bh <- readShapePoly(system.file("etc/shapes/bhicv.shp",
package="spdep")[1])
dpad <- data.frame(scale(bh@data[,5:8]))
bh.nb <- poly2nb(bh)
lcosts <- nbcosts(bh.nb, dpad)
install.packages("maptools")
install.packages("rgeos")
require(maptools)
bh <- readShapePoly(system.file("etc/shapes/bhicv.shp",
package="spdep")[1])
dpad <- data.frame(scale(bh@data[,5:8]))
bh.nb <- poly2nb(bh)
lcosts <- nbcosts(bh.nb, dpad)
nb.w <- nb2listw(bh.nb, lcosts, style="B")
system.time(mst.bh <- mstree(nb.w,5))
dim(mst.bh)
head(mst.bh)
tail(mst.bh)
par(mar=c(0,0,0,0))
plot(mst.bh, coordinates(bh), col=2,
cex.lab=.7, cex.circles=0.035, fg="blue")
plot(bh, border=gray(.5), add=TRUE)
model <- Mclust(esp.df, G=10)
summary(model$BIC)
fviz_mclust_bic(model)
esp.df$cluster <- as.factor(model$classification)
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 1.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1
p1 <- ggplot(esp.df, aes(x, y))+
geom_point(aes(colour = cluster),size = 0.5)+
ggtitle("HHHHH")+
theme(plot.title = element_text(hjust=0.5))
p1
install.packages("devtools")
library(devtools)
install_github("slidify", "ramanathv")
install_github("slidify", "ramanathv/slidify")
install_github("slidify", "ramanathv/slidify/slidify")
install_github("slidify", "ramnathv")
install.packages("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv/slidifyLibraries")
install_github('slidifyLibraries', 'ramnathv/slidifyLibraries')
library(slidify)
install_github('slidifyLibraries', 'ramnathv/slidifyLibraries')
library(devtools)
install_github('slidifyLibraries', 'ramnathv/slidifyLibraries')
install_github('slidifyLibraries', 'ramnathv/slidifyLibraries/slidifyLibraries')
install_github('slidifyLibraries', 'slidifyLibraries')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv', force=TRUE)
install_github('slidifyLibraries', 'ramnathv/slidifyLibraries', force=TRUE)
install_github('ramnathv/slidifyLibraries')
library(devtools)
install_github('ramnathv/slidifyLibraries')
install_github('ramnathv/slidifyLibraries', force=TRUE)
install_github("ramnathv/slidifyLibraries")
library(devtools)
install_github("ramnathv/slidifyLibraries")
library(devtools)
install_github("ramnathv/slidifyLibraries")
install_github("ramnathv/slidifyLibraries", force=TRUE)
library(slidify)
library(slidifyLibraries)
rm(list=ls())
library(tcltk)
dir_wd.loc<-tk_choose.dir()
setwd(dir_wd.loc)
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
# +
runDeck()
library(slidify)
library(slidifyLibraries)
library(shiny)
library(knitr)
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
slidify("index.Rmd")
# +
runDeck()
library(tcltk)
intra.loc <- tk_choose.files()
intra.tab <- read.csv(intra.loc, header = TRUE, stringsAsFactors = FALSE, dec=',')
str(intra.tab)
intra.tab <- intra.tab[,c(1:2,8)]
table(intra.tab[,3])
intra.tab[,"data"] <- as.Date(intra.tab[,"data"], format='%d/%m/%Y')
intra.tab[,"data"] <- as.Date(intra.tab[,"data"], format='%Y')
intra.tab[,"data"] <- as.Date(intra.tab[,"data"], format='%y')
View(intra.tab)
intra.tab <- read.csv(intra.loc, header = TRUE, stringsAsFactors = FALSE, dec=',')
str(intra.tab)
intra.tab <- read.csv(intra.loc, header = TRUE, stringsAsFactors = FALSE, dec=',')
str(intra.tab)
intra.tab <- intra.tab[,c(1:2,8)]
table(intra.tab[,3])
intra.tab[,"bond"] <- as.factor(intra.tab[,"bond"])
str(intra.tab)
require(googleVis)
plot(gvisMotionChart(intra.tab ,idvar="bond", timevar="tempo"))
View(intra.tab)
plot(gvisMotionChart(intra.tab ,idvar="bond", timevar="tempo"))
intra.tab <- read.csv(intra.loc, header = TRUE, stringsAsFactors = FALSE, dec=',')
str(intra.tab)
intra.tab <- intra.tab[,c(1:2,8)]
table(intra.tab[,3])
str(intra.tab)
intra.tab[,"tempo"] <- as.Date(intra.tab[,"tempo"], format='%Y')
intra.tab[,"tempo"] <- as.Date(intra.tab[,"tempo"])
View(intra.tab)
intra.tab <- read.csv(intra.loc, header = TRUE, stringsAsFactors = FALSE, dec=',')
str(intra.tab)
intra.tab <- read.csv(intra.loc, header = TRUE, stringsAsFactors = FALSE, dec=',')
str(intra.tab)
intra.tab <- intra.tab[,c(1:2,8)]
table(intra.tab[,3])
intra.tab[,"tempo"] <- as.Date(intra.tab[,"tempo"], format='%d/%m/%Y')
str(intra.tab)
intra.tab[,"bond"] <- as.factor(intra.tab[,"bond"])
str(intra.tab)
require(googleVis)
plot(gvisMotionChart(intra.tab ,idvar="bond", timevar="tempo"))
slidify("index.Rmd")
# +
runDeck()
intra.loc <- tk_choose.files()
intra.tab <- read.csv(intra.loc, header = TRUE, stringsAsFactors = FALSE, dec=',')
str(intra.tab)
intra.tab <- intra.tab[,c(1:2,8)]
table(intra.tab[,3])
intra.tab[,"tempo"] <- as.Date(intra.tab[,"tempo"], format='%d/%m/%Y')
str(intra.tab)
intra.tab[,"bond"] <- as.factor(intra.tab[,"bond"])
str(intra.tab)
require(googleVis)
plot(gvisMotionChart(intra.tab ,idvar="bond", timevar="tempo"))
plot(gvisMotionChart(intra.tab ,idvar="bond", timevar="tempo"))
plot(gvisMotionChart(intra.tab ,idvar="bond", timevar="tempo"))
save.image("~/Documents/2S2017/PROCESSOS_ESTOCASTICOS/UNIDADE3/trabalho/apres_Processos/tabs_ggVis/tabs_work2.RData")
slidify("index.Rmd")
# +
runDeck()
